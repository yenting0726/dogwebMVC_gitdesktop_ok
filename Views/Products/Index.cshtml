@using Newtonsoft.Json
@model IEnumerable<dogwebMVC.Models.Productdogweb>
@{
    ViewData["Title"] = "產品列表 - 狗狗網站";
}

<div class="page-container">
    <!-- 頁面標題 -->
    <div class="page-title">
        <h1><i class="fas fa-shopping-bag me-3"></i>產品列表</h1>
        <p class="mb-0 mt-2">精選優質寵物用品，為您的毛孩提供最好的選擇</p>
    </div>

    <div class="container">
        <div id="app1">
            <!-- 操作按鈕區域 -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <p v-show="showDiv">
                        <a asp-action="Create" class="btn btn-success">
                            <i class="fas fa-plus me-2"></i>新增產品
                        </a>
                    </p>
                </div>
                <div class="col-md-6 text-end">
                    <a class="btn btn-primary" asp-controller="Home" asp-action="shopping">
                        <i class="fas fa-shopping-cart me-2"></i>查看購物車
                        <span class="badge bg-light text-dark ms-2" v-if="cartItemCount > 0">{{ cartItemCount }}</span>
                    </a>
                </div>
            </div>

            <!-- 產品網格 -->
            <div class="row g-4">
                @foreach (var item in Model)
                {
                    <div class="col-lg-4 col-md-6 fade-in-up">
                        <div class="card h-100 product-card">
                            <div class="position-relative">
                                <img src="@item.PhotoPath" class="card-img-top fixed-img" alt="@item.Name">
                                <div class="position-absolute top-0 end-0 m-2">
                                    <span class="badge bg-success">熱銷</span>
                                </div>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title text-truncate">@Html.DisplayFor(modelItem => item.Name)</h5>
                                <div class="product-price mb-3">
                                    <i class="fas fa-tag me-2"></i>NT$ @Html.DisplayFor(modelItem => item.Price)
                                </div>
                                
                                <!-- 數量控制 -->
                                <div class="quantity-controls mb-3">
                                    <button type="button" class="btn btn-secondary" v-on:click="add(@item.Id, -1)">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <div class="quantity-display">
                                        <i class="fas fa-cubes me-2"></i>{{ counts[@item.Id] || 1 }}
                                    </div>
                                    <button type="button" class="btn btn-secondary" v-on:click="add(@item.Id, 1)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>

                                <!-- 主要操作按鈕 -->
                                <div class="mt-auto">
                                    <button class="btn btn-primary w-100 mb-2" v-on:click="addToCart(@item.Id)">
                                        <i class="fas fa-cart-plus me-2"></i>加入購物車
                                    </button>
                                    
                                    <!-- 管理員操作 -->
                                    <div v-show="showDiv" class="btn-group w-100" role="group">
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning">
                                            <i class="fas fa-edit me-1"></i>修改
                                        </a>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info">
                                            <i class="fas fa-info-circle me-1"></i>詳細
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">
                                            <i class="fas fa-trash me-1"></i>刪除
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- 空狀態 -->
            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-box-open fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">目前沒有產品</h4>
                    <p class="text-muted">點擊上方按鈕新增您的第一個產品</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- 將商品資料以 JSON 格式嵌入，避免中文編碼問題 -->
<script type="application/json" id="products-data">
    @Html.Raw(JsonConvert.SerializeObject(Model.Select(item => new { 
        Id = item.Id, 
        Name = item.Name, 
        PhotoPath = item.PhotoPath, 
        Price = item.Price 
    })))
</script>

<script>
    const app1 = Vue.createApp({
        data() {
            return {
                showDiv: true,
                counts: {
                    @foreach (var item in Model)
                    {
                        @: "@item.Id": 1@(item != Model.Last() ? "," : "")
                    }
                },
                products: [],
                cartItemCount: 0
            }
        },
        
        mounted() {
            // 從 JSON script 標籤讀取商品資料
            const productsData = document.getElementById('products-data');
            if (productsData) {
                try {
                    this.products = JSON.parse(productsData.textContent);
                    console.log('商品資料載入成功：', this.products);
                } catch (error) {
                    console.error('載入商品資料時發生錯誤：', error);
                }
            }
            
            // 更新購物車數量
            this.updateCartCount();
        },

        methods: {
            add(id, number) {
                if (!this.counts[id]) {
                    this.counts[id] = 1;
                }
                this.counts[id] += number;
                if (this.counts[id] < 1) this.counts[id] = 1;
            },

            addToCart(id) {
                try {
                    let cart = JSON.parse(localStorage.getItem('cart')) || {};

                    // 找出商品物件
                    const product = this.products.find(p => p.Id == id);
                    if (!product) {
                        this.showToast('找不到商品資料', 'error');
                        return;
                    }

                    // 確保數量是有效的數字
                    const quantity = parseInt(this.counts[id]) || 1;

                    if (cart[id]) {
                        cart[id].quantity += quantity;
                    } else {
                        cart[id] = {
                            quantity: quantity,
                            name: product.Name,
                            photoPath: product.PhotoPath,
                            price: parseFloat(product.Price)
                        };
                    }

                    localStorage.setItem('cart', JSON.stringify(cart));
                    this.updateCartCount();
                    
                    console.log('已加入購物車：', cart[id]);
                    this.showToast(`已加入購物車！\n商品：${product.Name}\n數量：${quantity}`, 'success');
                    
                    // 重置數量為 1
                    this.counts[id] = 1;
                } catch (error) {
                    console.error('加入購物車時發生錯誤：', error);
                    this.showToast('加入購物車失敗，請稍後再試', 'error');
                }
            },
            
            updateCartCount() {
                try {
                    const cart = JSON.parse(localStorage.getItem('cart')) || {};
                    this.cartItemCount = Object.keys(cart).length;
                } catch (error) {
                    this.cartItemCount = 0;
                }
            },
            
            showToast(message, type = 'info') {
                // 創建 Toast 元素
                const toast = document.createElement('div');
                toast.className = `toast-notification toast-${type}`;
                toast.innerHTML = `
                    <div class="toast-content">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                        ${message}
                    </div>
                `;
                
                document.body.appendChild(toast);
                
                // 顯示動畫
                setTimeout(() => toast.classList.add('show'), 100);
                
                // 自動移除
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => document.body.removeChild(toast), 300);
                }, 3000);
            }
        }
    });

    app1.mount('#app1');
</script>

<!-- Font Awesome 圖標 -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="~/css/modern-styles.css">

<style>
/* Toast 通知樣式 */
.toast-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: white;
    border-radius: 8px;
    padding: 1rem 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 9999;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    max-width: 300px;
}

.toast-notification.show {
    transform: translateX(0);
}

.toast-success {
    border-left: 4px solid #4CAF50;
}

.toast-error {
    border-left: 4px solid #f44336;
}

.toast-info {
    border-left: 4px solid #2196F3;
}

.toast-content {
    display: flex;
    align-items: center;
    font-weight: 500;
}

.toast-success .toast-content i {
    color: #4CAF50;
}

.toast-error .toast-content i {
    color: #f44336;
}

.toast-info .toast-content i {
    color: #2196F3;
}
</style>
